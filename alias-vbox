#! /bin/bash
# ---------------------------------------------------------------------------
# alias-vbox - Define os alias start, stop e ssh para manipulação de uma máquina virtual via console

# Copyright 2014, jarbas,,, <jarbas@CDS-NT119>
# All rights reserved.

# Usage: alias-vbox [-h|--help] [-d] <prefixo-alias> [<vmid>] [<ssh-host>] [<ssh-usr>]  

# Revision history:
# 2014-11-21	Created 
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"

## PUT FUNCTIONS HERE AND ADD TO main()

main(){
	aliases=~/.bash_alias

	if [[ $delete ]]; then
		sed -ni '/^{nalias}-/,$d' $aliases
		graceful_exit
	fi

	echo "alias ${nalias}-start='/usr/lib/virtualbox/VBoxHeadless -s \"${vmid}\" -v off &'" >> $aliases
	echo "alias ${nalias}-stop='/usr/lib/virtualbox/VBoxManage controlvm \"${vmid}\" acpipowerbutton'" >> $aliases
	echo "alias ${nalias}-ssh='ssh ${usr}@${host}'" >> $aliases
}

## END of Script Specific Code

clean_up() { # Perform pre-exit housekeeping
	debug "Cleaning up..."
	return
}

error_exit() {
	error "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	debug "...Finished"
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)    error_exit "Program interrupted by user" ;;
		TERM)   echo -e "\n$PROGNAME: Program terminated" >&2 ; graceful_exit ;;
		*)      error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

require() { 
    if command -v $1 >/dev/null; then
      debug ""$1" found in path!"
    else
      error ""$1" is not in your path. Please set the PATH correctly."
      exit 0
    fi
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help] [-d] <prefixo-alias> [<vmid>] [<ssh-host>] [<ssh-usr>]"
}

# Set Logging
exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR
silent_lvl=0; err_lvl=1; wrn_lvl=2; dbg_lvl=3; inf_lvl=4 # Set logging levels
notify() { log $silent_lvl "${TBLD}[NOTE]:${TRST} $1"; } # Always prints
error() { log $err_lvl "${TRST}${FRED}${TBLD}[ERROR]: ${TRST}${FRED}$1${TRST}"; }
warn() { log $wrn_lvl "${TRST}${FYLW}${TBLD}[WARNING]:${TRST} $1"; }
debug() { log $dbg_lvl "${TRST}${FCYN}${TBLD}[DEBUG]:${TRST} $1"; }
inf() { log $inf_lvl "${TRST}${FWHT}${TBLD}[INFO]:${TRST} $1"; } # "info" is already a command
log() {
        if [ -z $ver_lvl ]; then ver_lvl=2; fi # default to show warnings
    if [ $ver_lvl -ge $1 ]; then
        # Expand escaped characters, wrap at 70 chars, indent wrapped lines
        printf "$NOW $2\n" | fold -w70 -s >&3 #| sed '2~1s/^/  /' >&3
    fi
}

help_message() {
	cat <<- _EOF_
	$PROGNAME ver. $VERSION
	Define os alias start, stop e ssh para manipulação de uma máquina virtual via console

	$(usage)

	Options:
	-h, --help	Mostra essa mensagem de ajuda.
	-d              Remove os aliases criados para uma máquina virtual
	
	_EOF_
	return
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Parse command-line
while [[ -n $1 ]]; do
	case $1 in
		-h | --help)	help_message; graceful_exit ;;
		-d )		delete=true; shift ;;
		-* | --*)	usage; error_exit "Unknown option $1" ;;
		*)		break ;;
	esac
	shift
done

if [[ $# -lt 4 ]]; then
	if [[ ! $delete && $# -lt 1 ]]; then
		usage
		error_exit "Parâmetros incompletos"
	fi
fi

nalias=$1
vmid=$2
host=$3
usr=$4

startup(){
	echo "$PROGNAME ver. $VERSION run by $USER"
	# Source Config File
	if [[ -e ~/."$filename".conf ]]; then source ~/."$filename".conf
	elif [[ -e /etc/"$filename".conf ]]; then source /etc/"$filename".conf
	fi
}

# Main logic
startup
main
graceful_exit

